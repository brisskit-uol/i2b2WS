package ws;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriBuilder;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;

import uk.org.briccs.dataimport.ImportPdoWS;
import ws.utils.GetConnection;
import ws.utils.StreamGobbler;

import com.jayway.jsonpath.JsonPath;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.UniformInterfaceException;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;

  
/**
*
* <brisskit:licence>
* Copyright University of Leicester, 2012
* This software is made available under the terms & conditions of brisskit
* @author Saj Issa
* This resource represents the WebServices to send pdo files to i2b2 
and send an acknowledgement to civi on receipt of patient
* data from civi
* </brisskit:licence>
*
*/

  
@Path("/service") 

public class WebService_old {  
	
	final static Logger logger = LogManager.getLogger(WebService_old.class);
	
	@GET
	@Path("catissue")
	@Produces(MediaType.TEXT_XML)
	public String getTodosBrowser() {
		    
		    // http://blog.rassemblr.com/2011/05/jquery-ajax-and-rest-http-basic-authentication-done-deal/
		    // add i2b2 credentials
		    // perhaps call through php, then a servlet, pass i2b2 login credentials
		
		    try {
				Process proc = Runtime.getRuntime().exec("/home/si84/webservice.sh");
                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR");

        // any output?
                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT");

        // kick them off
        errorGobbler.start();
        outputGobbler.start();

        // any error???
        int exitVal;
		try {
			exitVal = proc.waitFor();
			logger.info("ExitValue: " + exitVal);
		} catch (InterruptedException e) {
			
			e.printStackTrace();
		}
        

        
				logger.info("Calling script");
			} catch (IOException e) {
				
				e.printStackTrace();
			}
		    logger.info("Print Test Line.");
		
			return "<status>Starting</status>"; 
	}
		
	
	@POST  
    @Path("i2b2callback")  
    @Consumes(MediaType.APPLICATION_JSON)  
    @Produces({MediaType.TEXT_HTML, MediaType.TEXT_PLAIN})  
    public String postOnlyXMLi2b2(@FormParam("incomingXML") String incomingXML) {
		logger.info("postOnlyXMLi2b2 incomingXML :" + incomingXML);      
        		
		return "success";
	}
	
	
	
	@GET
    @Path("i2b2callback1/{incomingXML}")  
	@Produces("text/html")  
    public String postOnlyXMLi2b1(@PathParam("incomingXML") String incomingXML) {
		logger.info("postOnlyXMLi2b1 incomingXML :" + incomingXML);      
		List<String> brisskitids = sql(incomingXML);
		
		//List<String> brisskitids = new ArrayList();
		//brisskitids.add("demo-520243995");
		
		
		
		
		//java.util.Date date= new java.util.Date();
		//System.out.println(new Timestamp(date.getTime()));
		String date = "i2b2-cohort-" + new java.text.SimpleDateFormat("yyyy-MM-dd--HH-mm-ss").format(new java.util.Date()); 
		System.out.println(date);
		
		ClientConfig config = new DefaultClientConfig();
		Client client = Client.create(config);
		
		WebResource createGroupService = client.resource(createGroup(date));
        String createGroupValueService = createGroupService.get(String.class);
        
        logger.info(" ");
        logger.info("responseoptionValueService............" + createGroupValueService); 

           
            
        	int group_id = JsonPath.read(createGroupValueService, "$.values[0].id");
        	
			logger.info("group_id............" + group_id); 
			
			System.out.println ("2");
			
			for (String brisskitid : brisskitids) {
				logger.info("brisskitid :" + brisskitid);    
				
				
				WebResource getContactIdService = client.resource(getContactId(brisskitid));
		        String getContactIdValueService = getContactIdService.get(String.class);
		        //String contact_id  = jsonGetId(getContactIdService.get(String.class), "contact_id");
		        
		        logger.info(" ");
		        logger.info("getContactIdValueService............" + getContactIdValueService);
		        
		        String contact_id = JsonPath.read(getContactIdValueService, "$.values.contact_id");
		        
		         
		        
		        logger.info("contact_id............" + contact_id);
		        
		        
		        
		        WebResource addContactToGroupService = client.resource(addContactToGroup(group_id,contact_id));
		        String addContactToGroupValueService = addContactToGroupService.get(String.class);
		        //String added  = jsonGetId(addContactToGroupService.get(String.class), "added");
		        
		        logger.info(" ");
		        logger.info("addContactToGroupValueService............" + addContactToGroupValueService);
		        
		        //int added = JsonPath.read(addContactToGroupValueService, "$.values.added");
		        
		        //logger.info("added............" + added);		        
		        
			}
				
			








		
		
		return "success";
	}
	
	
	
	
	
	@GET
    @Path("i2b2callback2/{incomingXML}")  
	@Produces("text/plain")  
    public String postOnlyXMLi2b3(@PathParam("incomingXML") String incomingXML) {
		logger.info("postOnlyXMLi2b1 incomingXML :" + incomingXML);      
        		
		return "success";
	}
	
	
	@GET  
    @Path("disp/{val}")  
    @Produces("text/plain")  
    public String getParameterToAdd(@PathParam("val") String name) {  
  
        StringBuffer buffer = new StringBuffer();  
        buffer.append("Dislay Message : ").append(name);  
  
        return buffer.toString();  
    } 
	
    @POST  
    @Path("pdo")  
    @Consumes(MediaType.APPLICATION_XML)  
    @Produces({MediaType.TEXT_HTML, MediaType.TEXT_PLAIN})  
    public String postOnlyXML2(@FormParam("incomingXML") String incomingXML,@FormParam("activity_id") String activity_id) {  
        System.out.println("incomingXML :" + incomingXML);      
        String str = incomingXML;
        String status = "";
        String status_var="Failed";
        
        //logger.info("replace + with %2B");
        logger.info("************* A PDO HAS ARRIVED *******************");
        logger.info(" ");
        logger.info("CONTENT OF XML " + incomingXML);
        logger.info(" ");
        logger.info("activity_id : " + activity_id);
        
      //Current Date time in Local time zone
        SimpleDateFormat localDateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
        String date = localDateFormat.format( new Date());

        if (str.contains("xml="))
        {
            str = str.substring(str.indexOf("xml=")+4);
        }
            
		try {
			//String param2AfterDecoding = URLDecoder.decode(str, "UTF-8");
			//System.out.println("param2 after decoding:" + param2AfterDecoding);
			
			//FileWriter fstream = new FileWriter("C:\\Documents and Settings\\Jupiter1\\workspace\\Myi2b2WS2\\src\\files\\pdo"+date+".xml");
			
			logger.info(" ");
	        logger.info("FILE NAME : " + "/local/testpdo/pdo"+date+".xml");
	        
			FileWriter fstream = new FileWriter("/local/testpdo/pdo"+date+".xml");
			BufferedWriter out = new BufferedWriter(fstream);
			//out.write(param2AfterDecoding);
			out.write(str);
			//Close the output stream
			out.close();
			  
			  
			/****************/
			  
			/** This is on a per PDO basis **/
			  
			ImportPdoWS importer = new ImportPdoWS();
			  
			boolean b = importer.setPDOFile("/local/testpdo/pdo"+date+".xml");
			  
			String[] args = new String[6];
			  		  
			args[0] = "-Dlog4j.configuration=file:///local/i2b2-procedures-2.0-development/config/log4j.properties";
			args[1] = "-Djava.endorsed.dirs=/local/i2b2-procedures-2.0-development/endorsed-lib"; 
			args[2] = "-DFRClearTempTables=true"; 
			args[3] = "-config=/local/i2b2-procedures-2.0-development/config/config.properties";
			args[4] = "-import="; // this is passed in above, created later as a file 
			args[5] = "-append=false";
			  
			boolean good = importer.retrieveArgs( args ) ;		
			if( !good ) {
					//log.error( USAGE ) ; 
				logger.info(" ");
		        logger.info("I2B2 FAILED1");
			}
			//
			// Process the config file...
			good = importer.retrieveConfigDetails() ;
			if( !good ) {
				logger.info(" ");
		        logger.info("I2B2 FAILED2");
			}
			
			//
			// Do the import process...
			good = importer.exec() ;
			if( !good ) {
				//log.debug( "Failure!" ) ;
				logger.info(" ");
		        logger.info("I2B2 FAILED3");
					
			}
			else
			{
				status = "success";
				logger.info(" ");
		        logger.info("I2B2 SUCCESS");
		        status_var = "Completed";
			}
			//
			// All appears to have gone well...
			//log.debug( "Done!" ) ;	
			
			logger.info(" ");
	        logger.info("I2B2 IMPORT COMPLETE");
		
			 
			/***************/
			
			
			/******** CIVI callback ***********/
		    
	        if (! activity_id.equals("X"))
	        {
	        
			try {
				
			
			String option_group_id="";
			String activity_status_id="";
			
			ClientConfig config = new DefaultClientConfig();
            Client client = Client.create(config);
            //client.addFilter(new HTTPBasicAuthFilter("soma","Leicester2"));

            /* get options list */
            WebResource optionGroupService = client.resource(getOptionGroupBaseURI());
            String responseoptionGroupService = optionGroupService.get(String.class);
            
            logger.info(" ");
	        logger.info("responseoptionGroupService............" + responseoptionGroupService);  
            
            
            option_group_id = jsonGetId(optionGroupService.get(String.class), "option_group");
            
            logger.info(" ");
	        logger.info("option_group_id............" + option_group_id); 

            if(status.equalsIgnoreCase("success"))
                status_var = "Completed";

            logger.info(" ");
	        logger.info("status_var............" + status_var); 
	        
            WebResource optionValueService = client.resource(getOptionValueBaseURI(option_group_id,status_var));
            String responseoptionValueService = optionValueService.get(String.class);
            
            logger.info(" ");
	        logger.info("responseoptionValueService............" + responseoptionValueService); 
            
            activity_status_id = jsonGetId(optionValueService.get(String.class), "option_value");

            logger.info(" ");
	        logger.info("activity_status_id............ " + activity_status_id); 
            

            WebResource service = client.resource(getBaseURI(activity_id, activity_status_id));
            
            ClientResponse response = service.type(MediaType.TEXT_HTML).post(ClientResponse.class); // added
              
            logger.info("3");         		  
                    		  
            
            //String response = service.get(String.class);
        
            logger.info(" ");
	        //logger.info("response............"+response);           
            
            logger.info(" ");
	        logger.info("CIVI CALLBACK COMPLETE");
			
			} catch (UniformInterfaceException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
	        }
			/******** CIVI callback ***********/
			
			  
			  			
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 
        return status_var;  
    }
    
    public static String excutePost(String targetURL, String urlParameters)
    {
      URL url;
      HttpURLConnection connection = null;  
      try {
    	  logger.info("1");
        //Create connection
        url = new URL(targetURL);
        connection = (HttpURLConnection)url.openConnection();
        connection.setRequestMethod("POST");
        //connection.setRequestProperty("Content-Type", 
        //     "application/x-www-form-urlencoded");
    
  			
        //connection.setRequestProperty("Content-Length", "" + Integer.toString(urlParameters.getBytes().length));
        connection.setRequestProperty("Content-Language", "en-US");  

        connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows; U; Windows NT 6.0; pl; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2");
        //connection.addRequestProperty("Referer", "http://xxxx");
        //connection.addRequestProperty("Cookie", "...");

   
        connection.getResponseCode();	
        connection.setUseCaches (false);
        connection.setDoInput(true);
        connection.setDoOutput(true);
        logger.info("2");
        //Send request
        DataOutputStream wr = new DataOutputStream (
                    connection.getOutputStream ());
        wr.writeBytes (urlParameters);
        wr.flush ();
        wr.close ();
        logger.info("3");
        //Get Response	
        InputStream is = connection.getInputStream();
        BufferedReader rd = new BufferedReader(new InputStreamReader(is));
        String line;
        StringBuffer response = new StringBuffer(); 
        while((line = rd.readLine()) != null) {
          response.append(line);
          response.append('\r');
        }
        rd.close();
        logger.info("4");
        return response.toString();

      } catch (Exception e) {
    	  logger.info("5");
        e.printStackTrace();
        return null;
        

      } finally {

        if(connection != null) {
          connection.disconnect(); 
        }
        logger.info("6");
      }
    }
    
    //http://bru2.brisskit.le.ac.uk/
    //http://civicrm/
    	
    private static URI getOptionGroupBaseURI() {
    	logger.info("getOptionGroupBaseURI ");
    	logger.info("http://civicrm/civicrm/civicrm/ajax/rest?json=1&debug=1&version=3&entity=OptionGroup&action=get&name=activity_status");
        return 
        		UriBuilder.fromUri("http://civicrm/civicrm/civicrm/ajax/rest?json=1&debug=1&version=3&entity=OptionGroup&action=get&name=activity_status").build(); 
    }
    
    private static URI getOptionValueBaseURI(String option_group_id, String status) {
    	logger.info("getOptionValueBaseURI ");
        logger.info("option_group_id = "+option_group_id);  
        logger.info("status = "+status); 
    	logger.info("http://civicrm/civicrm/civicrm/ajax/rest?json=1&debug=1&version=3&entity=OptionValue&action=get&option_group_id="+option_group_id+"&name="+status);
    	
        return 
        		UriBuilder.fromUri("http://civicrm/civicrm/civicrm/ajax/rest?json=1&debug=1&version=3&entity=OptionValue&action=get&option_group_id="+option_group_id+"&name="+status).build(); 

    }
    
    private static URI getBaseURI(String activity_id, String status_id) {
    	logger.info("getBaseURI ");
        logger.info("activity_id = "+activity_id);  
        logger.info("status_id = "+status_id); 
        logger.info("http://civicrm/civicrm/civicrm/ajax/rest?json=1&debug=1&entity=Activity&action=update&status_id="+status_id+"&id="+activity_id);
        
        return 
        		UriBuilder.fromUri("http://civicrm/civicrm/civicrm/ajax/rest?json=1&debug=1&entity=Activity&action=update&status_id="+status_id+"&id="+activity_id+"&details=").build(); 

    }


    private static String jsonGetId(String service, String option) throws JSONException
    {
        String id="";

        JSONObject obj1 = new JSONObject(service);
        JSONObject obj2 = new JSONObject(obj1.get("values").toString());
        Iterator itr = obj2.keys();

        if(itr.hasNext())
        {
            JSONObject obj3 = new JSONObject(obj2.get(itr.next().toString()).toString());

            if(option.equalsIgnoreCase("option_group"))
                id = obj3.get("id").toString();
            else
                id = obj3.get("value").toString();
        }

        return id;
    }
    
    
    private List sql(String p_ids) {  
        logger.info("p_ids :" + p_ids);
        
        List<String> brisskitids = new ArrayList();
        
        
        String delims = "[,]";
        String[] tokens = p_ids.split(delims);
        String where_clause = "";
        
        for (int i = 0; i < tokens.length; i++)
        {
            logger.info(i + " " + tokens[i]);
            where_clause = where_clause + "PATIENT_NUM = '" + tokens[i] + "' or ";
        }
        
        if (where_clause != null)
        {
        	where_clause = "where  [SOURCESYSTEM_CD] = 'BRICCS' AND (" + where_clause.substring(0, where_clause.length()-3) + ")";
        }
        
        logger.info(" where_clause " + where_clause);
        
        // logic to parse the xml and import it in oracle or my sql
        Connection conn = GetConnection.getSimpleConnectionMSSQL();      
        Statement s;
        
        
        //Map<String, t5> l = new HashMap<String, t5>();
        
        //List<t5> l = new ArrayList<t5>();
        
		try {
			
			
			/* DatabaseMetaData meta = conn.getMetaData();
		      ResultSet res = meta.getSchemas();
		      System.out.println("List of schemas: "); 
		      while (res.next()) {
		         System.out.println(
		            "   "+res.getString("TABLE_SCHEM") 
		           + ", "+res.getString("TABLE_CATALOG")); 
		      }
		      */
		      
			  // our SQL SELECT query. 
		      // if you only need a few columns, specify them by name instead of using "*"
		      String query =  "SELECT " +
		                      "[PATIENT_IDE] " +
							 // ",[PATIENT_IDE_SOURCE] " +
							  ",[PATIENT_NUM] " +
							 // ",[PATIENT_IDE_STATUS] " +
							 // ",[UPLOAD_DATE] " +
							 // ",[UPDATE_DATE] " +
							 // ",[DOWNLOAD_DATE] " +
							//  ",[IMPORT_DATE] " +
							 // ",[SOURCESYSTEM_CD] " +
							 // ",[UPLOAD_ID] " + 
							 // "FROM [d1crc3].[dbo].[Patient_Mapping]" +
							  "FROM [demobrisskitdata].[dbo].[Patient_Mapping]" +
		                       where_clause;

		      s = conn.createStatement ();
		      
		      // execute the query, and get a java resultset
		      ResultSet rs = s.executeQuery(query);
		      int count = 0;
		      
		      
		      // iterate through the java resultset
		      while (rs.next())
		      {  
		    	count++;  
		        String c1 = rs.getString(1);		        
		        brisskitids.add(c1);
		        logger.info(c1);
		      }
	        s.close ();
	        logger.info (count + " rows were selected");
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}        
        return brisskitids;  
    }  

    
    private static URI createGroup(String groupname) {
    	
        logger.info (" ***************" + groupname);
        logger.info ("http://civicrm/civicrm/civicrm/ajax/rest?json=1&sequential=1&debug=1&entity=Group&action=create&title=" + groupname);
        
    	return 
         		UriBuilder.fromUri("http://civicrm/civicrm/civicrm/ajax/rest?json=1&sequential=1&debug=1&entity=Group&action=create&title=" + groupname).build();     
    }
    
    private static URI getContactId(String brisskitid) {
    	
       logger.info (" ***************" + brisskitid);
       logger.info ("http://civicrm/civicrm/civicrm/ajax/rest?json=1&sequential=1&debug=1&entity=Brisskit&action=get&id=" + brisskitid);	
        
    	return 
    			 UriBuilder.fromUri("http://civicrm/civicrm/civicrm/ajax/rest?json=1&sequential=1&debug=1&entity=Brisskit&action=get&id=" + brisskitid).build();     
    }
    
    private static URI addContactToGroup(int groupid, String contactid) {
    	
      logger.info (groupid + " ***************" + contactid);
      logger.info ("http://civicrm/civicrm/civicrm/ajax/rest?json=1&sequential=1&debug=1&entity=GroupContact&action=create&group_id=" + groupid + "&contact_id=" + contactid);	
    	
    	
    	return 
         		UriBuilder.fromUri("http://civicrm/civicrm/civicrm/ajax/rest?json=1&sequential=1&debug=1&entity=GroupContact&action=create&group_id=" + groupid + "&contact_id=" + contactid).build();     
    }
    
    private static URI test() {
    
    	
       // /var/local/brisskit/drupal/site/civicrm/sites/all/modules/civicrm/api/v3
    	
       // create a group 
       // http://demo.brisskit.le.ac.uk/civicrm/civicrm/ajax/rest?json=1&debug=1&entity=Group&action=create&title=test1&name=saj&pass=brisskit&key=d6d0d158e2aef57d9d9424071ab139fb&json=1
       // http://demo.brisskit.le.ac.uk/civicrm/civicrm/ajax/rest?json=1&sequential=1&debug=1&entity=Group&action=create&title=test1
       // get the id...  the id is 8
    	   	
       // get the id from brisskit id
       // /ajax/rest?entity=Brisskit&action=get&id=[brisskit_id]&json=1
       // http://demo.brisskit.le.ac.uk/civicrm/civicrm/ajax/rest?json=1&sequential=1&debug=1&&entity=Brisskit&action=get&id=demo-520243995
    			    	
       // add a contact to group	
       // http://demo.brisskit.le.ac.uk/civicrm/civicrm/ajax/rest?json=1&sequential=1&debug=1&&entity=GroupContact&action=create
       // pass group_id, contact_id
    			
    	
    	return 
         		UriBuilder.fromUri("http://civicrm/civicrm/civicrm/ajax/rest?json=1&debug=1&entity=Activity&action=update&status_id=&details=").build(); 
	
    }	
    	
    
    
    
    
    
  
	}  